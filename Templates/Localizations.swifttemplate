

// MARK: Localizations

struct Localizations {

// MARK: - Common
<%_ let sharedLocalizations = types.enums.first(where: { $0.name == "L10n.Localizations"})!.variables.map({$0.name}) -%>
<% for item in sharedLocalizations { %>
    static let <%= item -%>: String = L10n.Localizations.<%= item -%>
<% } %>

// MARK: - Flavors
<% let dcLocalizationProperties = types.enums.first(where: { $0.name.contains("DCLocalizations")})!.variables.map({$0.name}) %>
<%_ let marvelLocalizationProperties = types.enums.first(where: { $0.name.contains("MarvelLocalizations")})!.variables.map({$0.name}) -%>
<%_ let combinedProperties = Set(dcLocalizationProperties).union(Set(marvelLocalizationProperties)) -%>
<%_ for item in combinedProperties { -%>
    static let <%= item %>: String = {
    <%_ if dcLocalizationProperties.contains(item) && marvelLocalizationProperties.contains(item) { -%>
#if Marvel
        L10n.MarvelLocalizations.<%= item %>
#else
        L10n.DCLocalizations.<%= item %>
#endif
    <%_ } else if dcLocalizationProperties.contains(item) { -%>
#warning("<%= item %> is unique to DCLocalizations")
        return L10n.DCLocalizations.<%= item %>
    <%_ } else { -%>
#warning("<%= item %> is unique to MarvelLocalizations")
        return L10n.MarvelLocalizations.<%= item %>
    <%_ } -%>
    }()

<%_ } -%>
}

// MARK: Image Assets

extension Asset {
<%_ for type in types.enums where type.name.contains("Asset.") { -%>
    <%_ for variable in type.variables { -%>
        <%_ if type.name == "Asset.Assets" { -%>

    static let <%= variable.name %>: ImageAsset = {
        <%= type.name %>.<%= variable.name %>
    }()
        <%_ } else if type.name == "Asset.DCAssets" { -%>

    static let <%= variable.name %>: ImageAsset = {
#if Marvel
        Asset.MarvelAssets.<%= variable.name %>
#else
        Asset.DCAssets.<%= variable.name %>
#endif
    }()
        <%_ } -%>
    <%_ } -%>
<%_ } -%>

}
